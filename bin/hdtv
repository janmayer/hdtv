#!/usr/bin/env python
# -*- coding: utf-8 -*-
#-------------------------------------------------------------------------------
# This is the main HDTV application.
#-------------------------------------------------------------------------------
from __future__ import print_function

# Load required modules
import sys
import os

from optparse import OptionParser

# Command line arguments
parser = OptionParser()
parser.add_option("-b", "--batch", dest="batchfile",
                  help="Open and execute hdtv batchfile")
parser.add_option("-v", "--version", action="store_true", dest="version", default=False,
                  help="Show HDTV Version")

(options, args) = parser.parse_args()
sys.argv = [sys.argv[0]] # Reset command line arguments so that ROOT does not stumble about them

# Get ~/.hdtv directory
try:
    configpath = os.environ["HDTV_USER_PATH"]
except KeyError:
    configpath = os.path.expanduser("~/.hdtv")

if not os.access(configpath, os.W_OK):   
    try:
        os.mkdir(configpath, 0755)
    except OSError:
        print("Could not access config path", configpath, file=sys.stderr)
        print("Try setting HDTV_USER_PATH environment variable.", file=sys.stderr)
        sys.exit(1)

sys.path.append(configpath)
sys.path.append(configpath + "/plugins")

# Check if we are inside the hdtv source directory
hdtvpath=sys.path[0].split(os.sep)
hdtvpath = os.sep.join(hdtvpath[:-1])
if os.path.exists(hdtvpath+os.sep+'hdtv'):
    sys.path.insert(1,hdtvpath)
else:
    # If not, HDTV is nost likely installed/split into the different system dirs
    # Add HDTV include path to ROOT_INCLUDE_PATH
    hdtv_incl_path = sys.exec_prefix + '/share/hdtv/include'
    root_incl_path = os.environ.get('ROOT_INCLUDE_PATH', '')
    if root_incl_path.strip():
        root_incl_path = root_incl_path.strip() + ':' + hdtv_incl_path
    else:
        root_incl_path = hdtv_incl_path
    os.environ['ROOT_INCLUDE_PATH'] = root_incl_path


# Print Version Information
import hdtv.version
if options.version:
    print(("HDTV " + hdtv.version.VERSION))
    quit()

# Import core modules
import hdtv.cmdline
import hdtv.session
import hdtv.ui


hdtv.cmdline.ReadReadlineInit(configpath + "/inputrc")
hdtv.cmdline.SetReadlineHistory(configpath + "/hdtv_history")
hdtv.cmdline.SetInteractiveDict(locals())
spectra = hdtv.session.Session()

# Import core plugins
import hdtv.plugins.textInterface
import hdtv.plugins.ls
import hdtv.plugins.run
import hdtv.plugins.specInterface 
import hdtv.plugins.fitInterface
import hdtv.plugins.calInterface
import hdtv.plugins.matInterface
import hdtv.plugins.rootInterface
import hdtv.plugins.config
import hdtv.plugins.fitlist
import hdtv.plugins.fittex
import hdtv.plugins.fitmap
import hdtv.plugins.dblookup
import hdtv.plugins.peakfinder
import hdtv.plugins.printing


hdtv.ui.msg("HDTV - Nuclear Spectrum Analysis Tool")


# Execute startup.py for user configuration in python
try:
    import startup
except ImportError:
    hdtv.ui.debug("No startup.py file")

# Execute startup.hdtv for user configuration in "hdtv" language
try:
    startup_hdtv = configpath + os.sep + "startup.hdtv"
    if os.path.exists(startup_hdtv):
        hdtv.ui.msg("Reading startup.hdtv")
        hdtv.cmdline.command_line.ExecCmdfile(startup_hdtv)
    else:
        hdtv.ui.debug("No startup.hdtv file")
except IOError, msg:
    hdtv.ui.error("Error reading %s: %s" % (startup_hdtv, msg))

# Execute batchfile given on command line
try:
    if options.batchfile is not None:
        hdtv.ui.msg("Executing \'%s\'" % options.batchfile)
        hdtv.cmdline.command_line.ExecCmdfile(options.batchfile)
except IOError, msg:
    hdtv.ui.msg("Error reading %s: %s" % (options.batchfile, msg))
   

# Go
hdtv.cmdline.MainLoop()
hdtv.cmdline.command_tree.SetDefaultLevel(1)
